<% content_for :admin_console do %>
  <%= link_to "Add a Lot", new_land_path, class: 'btn btn-info text-white' %>
<% end %>

<div class="container">

  <div class="double-header text-center">
    <h2 class="text-center title">
      Project Concepts
    </h2>
    <h3 class="title-blurb">
        We’re trying something new. We want to put designs in front of you to see what you think. The goal? To put designs you like on locations you love. All feedback is welcome!
    </h3>
    <span>
      Price ranges are representative of home price with standard features.
    </span>
    <br /><br />
  </div>
  <br />

  <!-- MAPBOX -->
  <div class="mapbox">
    <div class='sidebar'>
      <div class='heading'>
        <h3>Project Concepts</h3>
      </div>
      <div id='listings' class='listings'></div>
    </div>
    <div id='map' class='map pad2'></div>
  </div>

  <script>
    if (!('remove' in Element.prototype)) {
      Element.prototype.remove = function() {
        if (this.parentNode) {
          this.parentNode.removeChild(this);
        }
      };
    }
    // load map graphic
    mapboxgl.accessToken = 'pk.eyJ1IjoibW9kdWxldGVjaCIsImEiOiJjazA1YzVoNXgwMGV4M3BxdDFvZGZmd3JmIn0.LawkaOqv-gClqemcScZTGg';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/moduletech/ck05c5xpa027p1cmtlkolntu4'
    });

    // generate data points for map
    var mapBoxLots = {
      "type": "FeatureCollection",
      "features": []
    };
    var features = []

    var lots_string = '<%= Land.all.to_json.to_str %>'.replace(/&quot;/g, '"')

    var lots_obj = JSON.parse(lots_string)
    lots_obj.forEach(function (lot,index){
      var feature = {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [
            lot.longitude,
            lot.latitude
          ]
        },
        "properties": {
          "address": lot.address,
          "model": lot.model.name,
          "id": lot.id,
        }
      }

      features.push(feature)
    });

    mapBoxLots.features = features

    // add datapoints layer to map
    map.on('load', function(e) {
      // Add markers to map
      map.addLayer({
        id: 'locations',
        type: 'symbol',
        // Add a GeoJSON source containing place coordinates and information.
        source: {
          type: 'geojson',
          data: mapBoxLots
        },
        layout: {
          'icon-image': 'marker-15',
          'icon-allow-overlap': true,
        }
      });

      function buildLocationList(mapBoxLots) {
        // Iterate through the list of stores
        for (i = 0; i < mapBoxLots.features.length; i++) {
          var currentFeature = mapBoxLots.features[i];
          // Shorten data.feature.properties to `prop` so we're not
          // writing this long form over and over again.
          var prop = currentFeature.properties;
          // Select the listing container in the HTML and append a div
          // with the class 'item' for each store
          var listings = document.getElementById('listings');
          var listing = listings.appendChild(document.createElement('div'));
          listing.className = 'item';
          listing.id = 'listing-' + i;

          // Create a new link with the class 'title' for each store
          // and fill it with the store address
          var link = listing.appendChild(document.createElement('a'));
          link.href = '#'+ prop.id;
          link.className = 'title';
          link.dataPosition = i;
          link.innerHTML = prop.model + " @ " + prop.address;

          link.addEventListener('click', function(e) {
            // Update the currentFeature to the store associated with the clicked link
            var clickedListing = mapBoxLots.features[this.dataPosition];
            // 1. Fly to the point associated with the clicked link
            flyToStore(clickedListing);
            // 2. Close all other popups and display popup for clicked store
            createPopUp(clickedListing);
            // 3. Highlight listing in sidebar (and remove highlight for all other listings)
            var activeItem = document.getElementsByClassName('active');
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            this.parentNode.classList.add('active');
          });

          // Create a new div with the class 'details' for each store
          // and fill it with the city and phone number
          var details = listing.appendChild(document.createElement('div'));
          if (prop.phone) {
            details.innerHTML += ' · ' + prop.phoneFormatted;
          }
        }
      }

      buildLocationList(mapBoxLots);
    });

    function flyToStore(currentFeature) {
      map.flyTo({
        center: currentFeature.geometry.coordinates,
        zoom: 15
      });
    }

    function createPopUp(currentFeature) {
      var popUps = document.getElementsByClassName('mapboxgl-popup');
      // Check if there is already a popup on the map and if so, remove it
      if (popUps[0]) popUps[0].remove();

      var popup = new mapboxgl.Popup({ closeOnClick: false })
        .setLngLat(currentFeature.geometry.coordinates)
        .setHTML(
          '<h4>' + currentFeature.properties.address + '</h4>')
        .addTo(map);
    }


    // Add an event listener for when a user clicks on the map
    map.on('click', function(e) {
      // Query all the rendered points in the view
      var features = map.queryRenderedFeatures(e.point, { layers: ['locations'] });
      if (features.length) {
        var clickedPoint = features[0];
        // 1. Fly to the point
        flyToStore(clickedPoint);
        // 2. Close all other popups and display popup for clicked store
        createPopUp(clickedPoint);
        // 3. Highlight listing in sidebar (and remove highlight for all other listings)
        var activeItem = document.getElementsByClassName('active');
        if (activeItem[0]) {
          activeItem[0].classList.remove('active');
        }
        // Find the index of the store.features that corresponds to the clickedPoint that fired the event listener
        var selectedFeature = clickedPoint.properties.address;

        for (var i = 0; i < stores.features.length; i++) {
          if (stores.features[i].properties.address === selectedFeature) {
            selectedFeatureIndex = i;
          }
        }
        // Select the correct list item using the found index and add the active class
        var listing = document.getElementById('listing-' + selectedFeatureIndex);
        listing.classList.add('active');
      }
    });

    mapBoxLots.features.forEach(function(marker) {
      // Create a div element for the marker
      var el = document.createElement('div');
      // Add a class called 'marker' to each div
      el.className = 'marker';
      // By default the image for your custom marker will be anchored
      // by its center. Adjust the position accordingly
      // Create the custom markers, set their position, and add to map
      new mapboxgl.Marker(el, { offset: [0, -23] }).setLngLat(marker.geometry.coordinates).addTo(map);
      el.addEventListener('click', function(e) {
        var activeItem = document.getElementsByClassName('active');
        // 1. Fly to the point
        flyToStore(marker);
        // 2. Close all other popups and display popup for clicked store
        createPopUp(marker);
        // 3. Highlight listing in sidebar (and remove highlight for all other listings)
        e.stopPropagation();
        if (activeItem[0]) {
          activeItem[0].classList.remove('active');
        }
        var listing = document.getElementById('listing-' + i);
        console.log(listing);
        listing.classList.add('active');
      });
    });

  </script>
  <!-- END MAPBOX -->

  <br />
  <% if @lands.blank? %>
    <div class="text-center alert alert-warning lead">
      There are no lots in the system.
    </div>
  <% else %>
    <%= render 'lands_index' %>
  <% end %>

<br />
